Statements. Program ::= [Statement] ;
StatementBlockStat. StatementBlock ::= "{" [Statement] "}" ;
separator Statement ";" ;
comment "//" ;
comment "/*" "*/" ;
DeclStat. Statement ::= Decl ; 
SimpleDecl. Decl ::= "val" Ident "=" Exp ;
TypedDecl. Decl ::=  "val" Type Ident "=" Exp ;
SimpleDeclWith. Decl ::= "val" Ident "=" Exp "with" Exp ;
TypedDeclWith. Decl ::= "val" Type Ident "=" Exp "with" Exp;
BareDecl. Decl ::= "val" Type Ident ;
ForStatement. Statement ::= "for" "(" Ident "in" Exp ")" StatementBlock ;
IfStatement. Statement ::= "if" "(" Exp ")" StatementBlock ;
IfElseStatement. Statement ::= "if" "(" Exp ")" StatementBlock ElseBlock ;
ElseIfBlock. ElseBlock ::= "else" "if" "(" Exp ")" StatementBlock ;
ElseIf2Block. ElseBlock ::= "else" "if" "(" Exp ")" StatementBlock ElseBlock ;
ElseBlockStat. ElseBlock ::= "else" StatementBlock ;
SomeStatement. Statement ::= "some" "(" Ident "in" Exp ")" StatementBlock ;
SomeElseStatement. Statement ::= "some" "(" Ident "in" Exp ")" StatementBlock ElseBlock ;
ConditionalStatement. Statement ::= Ident "=" Exp "with" Exp ;
EFuncDecl. Exp ::= "def" "(" [Argument] ")" StatementBlock ; 
EOr. Exp ::= Exp "||" Exp1 ;
EAnd. Exp1 ::= Exp1 "&&" Exp2 ;
EEquals. Exp2 ::= Exp2 "==" Exp3 ;
ENEq. Exp2 ::= Exp2 "!=" Exp3 ;
ELeq. Exp3 ::= Exp3 "<=" Exp4 ;
EGeq. Exp3 ::= Exp3 ">=" Exp4 ;
ELessThan. Exp3 ::= Exp3 "<" Exp4 ;
EGreaterThan. Exp3 ::= Exp3 ">" Exp4 ;
EAdd. Exp4 ::= Exp4 "+" Exp5 ;
ESub. Exp4 ::= Exp4 "-" Exp5 ;
EMul. Exp5 ::= Exp5 "*" Exp6 ;
EDiv. Exp5 ::= Exp5 "/" Exp6 ;
ENot. Exp6 ::= "!" Exp7 ;
EIdent. Exp7 ::= Ident ;
EFuncCall. Exp7 ::= Ident "(" [Exp] ")" ;
ArgumentDef. Argument ::= Type Ident ;
separator Argument "," ;
EInt. Exp8 ::= Integer ;
EFloat. Exp8 ::= Double ;
EString. Exp8 ::= String ;
coercions Exp 8 ;
separator Exp "," ;
IntType. Type ::= "Int" ;
FloatType. Type ::= "Float" ;
StringType. Type ::= "String" ;
BoolType. Type ::= "Bool" ;
AnythingType. Type ::= "Anything" ;
NullType. Type ::= "Null" ;
UnitType. Type ::= "Unit" ;
VectorType. Type ::= Type "[" "]" ;
