-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parshimmr where
import Absshimmr
import Lexshimmr
import ErrM
}

%name pProgram Program
%name pStatementBlock StatementBlock
%name pListStatement ListStatement
%name pStatement Statement
%name pDecl Decl
%name pElseBlock ElseBlock
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pArgument Argument
%name pListArgument ListArgument
%name pListExp ListExp
%name pType Type
%name pSetTypeElem SetTypeElem
%name pListSetTypeElem ListSetTypeElem

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '{' { PT _ (TS "{") }
 '}' { PT _ (TS "}") }
 ';' { PT _ (TS ";") }
 '=' { PT _ (TS "=") }
 '(' { PT _ (TS "(") }
 ')' { PT _ (TS ")") }
 '||' { PT _ (TS "||") }
 '&&' { PT _ (TS "&&") }
 '==' { PT _ (TS "==") }
 '!=' { PT _ (TS "!=") }
 '<=' { PT _ (TS "<=") }
 '>=' { PT _ (TS ">=") }
 '<' { PT _ (TS "<") }
 '>' { PT _ (TS ">") }
 '+' { PT _ (TS "+") }
 '-' { PT _ (TS "-") }
 '*' { PT _ (TS "*") }
 '/' { PT _ (TS "/") }
 '!' { PT _ (TS "!") }
 ',' { PT _ (TS ",") }
 '[' { PT _ (TS "[") }
 ']' { PT _ (TS "]") }
 ':' { PT _ (TS ":") }
 'def' { PT _ (TS "def") }
 'else' { PT _ (TS "else") }
 'for' { PT _ (TS "for") }
 'if' { PT _ (TS "if") }
 'in' { PT _ (TS "in") }
 'some' { PT _ (TS "some") }
 'val' { PT _ (TS "val") }
 'with' { PT _ (TS "with") }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read $1) :: Integer }
Double  :: { Double }  : L_doubl  { (read $1) :: Double }
String  :: { String }  : L_quoted { $1 }

Program :: { Program }
Program : ListStatement { Statements $1 } 


StatementBlock :: { StatementBlock }
StatementBlock : '{' ListStatement '}' { StatementBlockStat $2 } 


ListStatement :: { [Statement] }
ListStatement : {- empty -} { [] } 
  | Statement { (:[]) $1 }
  | Statement ';' ListStatement { (:) $1 $3 }


Statement :: { Statement }
Statement : Decl { DeclStat $1 } 
  | 'for' '(' Ident 'in' Exp ')' StatementBlock { ForStatement $3 $5 $7 }
  | 'if' '(' Exp ')' StatementBlock { IfStatement $3 $5 }
  | 'if' '(' Exp ')' StatementBlock ElseBlock { IfElseStatement $3 $5 $6 }
  | 'some' '(' Ident 'in' Exp ')' StatementBlock { SomeStatement $3 $5 $7 }
  | 'some' '(' Ident 'in' Exp ')' StatementBlock ElseBlock { SomeElseStatement $3 $5 $7 $8 }
  | Ident '=' Exp 'with' Exp { ConditionalStatement $1 $3 $5 }


Decl :: { Decl }
Decl : 'val' Ident '=' Exp { SimpleDecl $2 $4 } 
  | 'val' Type Ident '=' Exp { TypedDecl $2 $3 $5 }
  | 'val' Ident '=' Exp 'with' Exp { SimpleDeclWith $2 $4 $6 }
  | 'val' Type Ident '=' Exp 'with' Exp { TypedDeclWith $2 $3 $5 $7 }
  | 'val' Type Ident { BareDecl $2 $3 }
  | 'def' Ident '(' ListArgument ')' StatementBlock { EFuncDecl $2 $4 $6 }
  | 'def' Type Ident '(' ListArgument ')' StatementBlock { EFuncDecl2 $2 $3 $5 $7 }


ElseBlock :: { ElseBlock }
ElseBlock : 'else' 'if' '(' Exp ')' StatementBlock { ElseIfBlock $4 $6 } 
  | 'else' 'if' '(' Exp ')' StatementBlock ElseBlock { ElseIf2Block $4 $6 $7 }
  | 'else' StatementBlock { ElseBlockStat $2 }


Exp :: { Exp }
Exp : Exp '||' Exp1 { EOr $1 $3 } 
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : Exp1 '&&' Exp2 { EAnd $1 $3 } 
  | Exp2 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 '==' Exp3 { EEquals $1 $3 } 
  | Exp2 '!=' Exp3 { ENEq $1 $3 }
  | Exp3 { $1 }


Exp3 :: { Exp }
Exp3 : Exp3 '<=' Exp4 { ELeq $1 $3 } 
  | Exp3 '>=' Exp4 { EGeq $1 $3 }
  | Exp3 '<' Exp4 { ELessThan $1 $3 }
  | Exp3 '>' Exp4 { EGreaterThan $1 $3 }
  | Exp4 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '+' Exp5 { EAdd $1 $3 } 
  | Exp4 '-' Exp5 { ESub $1 $3 }
  | Exp5 { $1 }


Exp5 :: { Exp }
Exp5 : Exp5 '*' Exp6 { EMul $1 $3 } 
  | Exp5 '/' Exp6 { EDiv $1 $3 }
  | Exp6 { $1 }


Exp6 :: { Exp }
Exp6 : '!' Exp7 { ENot $2 } 
  | Exp7 { $1 }


Exp7 :: { Exp }
Exp7 : Ident { EIdent $1 } 
  | Ident '(' ListExp ')' { EFuncCall $1 $3 }
  | Integer { EInt $1 }
  | Double { EFloat $1 }
  | String { EString $1 }
  | '(' Exp ')' { $2 }


Argument :: { Argument }
Argument : Type Ident { ArgumentDef $1 $2 } 


ListArgument :: { [Argument] }
ListArgument : {- empty -} { [] } 
  | Argument { (:[]) $1 }
  | Argument ',' ListArgument { (:) $1 $3 }


ListExp :: { [Exp] }
ListExp : {- empty -} { [] } 
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }


Type :: { Type }
Type : Ident { EType $1 } 
  | Type '[' Type ']' { VectorType $1 $3 }
  | Integer ':' Integer { RangeType $1 $3 }
  | '{' ListSetTypeElem '}' { SetType $2 }


SetTypeElem :: { SetTypeElem }
SetTypeElem : Integer { EIntSTE $1 } 
  | Double { EFloatSTE $1 }
  | String { EStringSTE $1 }


ListSetTypeElem :: { [SetTypeElem] }
ListSetTypeElem : {- empty -} { [] } 
  | SetTypeElem { (:[]) $1 }
  | SetTypeElem ',' ListSetTypeElem { (:) $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map prToken (take 4 ts))

myLexer = tokens
}

