Statements. Program ::= [Statement] ;
StatementBlockStat. StatementBlock ::= "{" [Statement] "}" ;
separator Statement ";" ;
comment "//" ;
comment "/*" "*/" ;
DeclStat. Statement ::= Decl ; 
SimpleDecl. Decl ::= "val" Ident "=" Exp ;
TypedDecl. Decl ::=  "val" Type Ident "=" Exp ;
SimpleDeclWith. Decl ::= "val" Ident "=" Exp "with" Exp ;
TypedDeclWith. Decl ::= "val" Type Ident "=" Exp "with" Exp;
BareDecl. Decl ::= "val" Type Ident ;
EFuncDecl. Decl ::= "def" Ident "(" [Argument] ")" StatementBlock ;  
EFuncDeclWithType. Decl ::= "def" Type Ident "(" [Argument] ")" StatementBlock ;
ForStatement. Statement ::= "for" "(" Ident "in" Exp ")" StatementBlock ;
IfStatement. Statement ::= "if" "(" Exp ")" StatementBlock ;
IfElseStatement. Statement ::= "if" "(" Exp ")" StatementBlock ElseBlock ;
ElseIfBlock. ElseBlock ::= "else" "if" "(" Exp ")" StatementBlock ;
ElseIf2Block. ElseBlock ::= "else" "if" "(" Exp ")" StatementBlock ElseBlock ;
ElseBlockStat. ElseBlock ::= "else" StatementBlock ;
ElseFailStat. ElseBlock ::= "else" "fail" ;
SomeStatement. Statement ::= "some" "(" Ident "in" Exp ")" StatementBlock ;
SomeElseStatement. Statement ::= "some" "(" Ident "in" Exp ")" StatementBlock ElseBlock ;
ConditionalStatement. Statement ::= LExpr "=" Exp "with" Exp ;
AbsoluteStatement. Statement ::= LExpr "=" Exp ;
ExpAsStatement. Statement ::= Exp ;
EOr. Exp ::= Exp "||" Exp1 ;
EAnd. Exp1 ::= Exp1 "&&" Exp2 ;
EEquals. Exp2 ::= Exp2 "==" Exp3 ;
ENEq. Exp2 ::= Exp2 "!=" Exp3 ;
ELeq. Exp3 ::= Exp3 "<=" Exp4 ;
EGeq. Exp3 ::= Exp3 ">=" Exp4 ;
ELessThan. Exp3 ::= Exp3 "<" Exp4 ;
EGreaterThan. Exp3 ::= Exp3 ">" Exp4 ;
EAdd. Exp4 ::= Exp4 "+" Exp5 ;
ESub. Exp4 ::= Exp4 "-" Exp5 ;
EMul. Exp5 ::= Exp5 "*" Exp6 ;
EDiv. Exp5 ::= Exp5 "/" Exp6 ;
ENot. Exp6 ::= "!" Exp7 ;
EIdent. Exp7 ::= Ident ;
EFuncCall. Exp7 ::= Ident "(" [Exp] ")" ;
ArgumentDef. Argument ::= Type Ident ;
separator Argument "," ;
EInt. Exp7 ::= Integer ;
EFloat. Exp7 ::= Double ;
EString. Exp7 ::= String ;
coercions Exp 7 ;
separator Exp "," ;
EType. Type ::= Ident ;
VectorType. Type ::= Type "[" Type "]" ;
RangeType. Type ::= Integer ":" Integer ;
SetType. Type ::= "{" [SetTypeElem] "}" ;
EIntSTE. SetTypeElem ::= Integer ;
EFloatSTE. SetTypeElem ::= Double ;
EStringSTE. SetTypeElem ::= String ;
separator SetTypeElem "," ;
VarAsLExpr. LExpr ::= Ident ;
VectorAsLExpr. LExpr ::= LExpr "[" [Exp] "]" ; 
